# -*- coding: utf-8 -*-
"""prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGUmXzbh7bNIeY5zq_PQ8q3mYyuTbFlg
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re

# URL của trang web để lấy dữ liệu
url = "https://en.wikipedia.org/wiki/List_of_the_busiest_airports_in_Vietnam"

# Gửi yêu cầu GET tới trang web
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# Tìm tất cả các bảng có class 'wikitable'
tables = soup.find_all('table', class_='wikitable')

# Hàm để lấy dữ liệu từ một bảng với tiêu đề đã chỉ định
def scrape_airport_data(required_headers):
    data = []  # Danh sách để lưu trữ dữ liệu
    for table in tables:
        # Lấy tiêu đề cột
        headers = [th.text.strip() for th in table.find_all('th')]

        # Kiểm tra xem tất cả các tiêu đề yêu cầu có trong tiêu đề cột hay không
        if all(header in headers for header in required_headers):
            # Lấy dữ liệu từ bảng
            rows = table.find_all('tr')[1:]  # Bỏ qua hàng tiêu đề
            for row in rows:
                cols = [td.text.strip() for td in row.find_all('td')]
                # Chỉ thêm dữ liệu nếu số lượng cột khớp với tiêu đề
                if len(cols) == len(required_headers):
                    # Xử lý từng cột: loại bỏ số trong ngoặc và chuyển đổi giá trị null/unknown thành 0
                    processed_cols = []
                    for col in cols:
                        # Loại bỏ số trong ngoặc
                        col = re.sub(r'\[\d+\]', '', col).strip()
                        # Chuyển đổi 'null' hoặc 'unknown' thành '0'
                        if col.lower() in ['null', 'unknown']:
                            col = '0'
                        processed_cols.append(col)  # Thêm cột đã xử lý vào danh sách
                    data.append(processed_cols)
    return data

# Định nghĩa tiêu đề yêu cầu cho cả hai tập dữ liệu
required_headers_2020s = ['No.', 'Airport name', 'Province', 'City served', 'IATA', 'ICAO', '2020', '2021', '2022', '2023']
required_headers_2012s = ['No.', 'Airport name', 'Province', 'City served', 'IATA', 'ICAO', '2012[17]', '2013[17]', '2014[17]', '2015[18]', '2016[17]', '2017', '2018[19]', '2019[20][21]']

# Lấy dữ liệu cho những năm 2020 và lưu vào CSV
data_2020s = scrape_airport_data(required_headers_2020s)
if data_2020s:
    df_2020s = pd.DataFrame(data_2020s, columns=required_headers_2020s)
    df_2020s.to_csv('airports_data2020s.csv', index=False)
    print("Dữ liệu đã được lưu vào airports_data2020s.csv.")
else:
    print("Không có dữ liệu nào được tìm thấy với các tiêu đề cột yêu cầu cho 2020s.")

# Lấy dữ liệu cho những năm 2012 và lưu vào CSV
data_2012s = scrape_airport_data(required_headers_2012s)
if data_2012s:
    df_2012s = pd.DataFrame(data_2012s, columns=required_headers_2012s)
    df_2012s.to_csv('airports_data2012s.csv', index=False)
    print("Dữ liệu đã được lưu vào airports_data2012s.csv.")
else:
    print("Không có dữ liệu nào được tìm thấy với các tiêu đề cột yêu cầu cho 2012s.")

# Hợp nhất hai tệp CSV
# Tải hai tệp CSV vào DataFrames
df_2020s = pd.read_csv('airports_data2020s.csv')
df_2012s = pd.read_csv('airports_data2012s.csv')

# Hợp nhất hai DataFrame trên một cột chung (ví dụ: 'No.')
merged_df = pd.merge(df_2012s, df_2020s, on='No.', how='outer')

# Loại bỏ các hậu tố khỏi các cột
merged_df.columns = [col.split('_')[0] if '_' in col else col for col in merged_df.columns]

# Loại bỏ số trong ngoặc khỏi tên cột
merged_df.columns = [re.sub(r'\[\d+\]', '', col).strip() for col in merged_df.columns]

# Loại bỏ các cột trùng lặp, giữ lại chỉ lần xuất hiện đầu tiên
merged_df = merged_df.loc[:, ~merged_df.columns.duplicated()]

# Giữ lại chỉ các cột đã chỉ định
columns_to_keep = [
    'No.', 'Airport name', 'Province', 'City served', 'IATA', 'ICAO',
    '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019',
    '2020', '2021', '2022', '2023'
]
merged_df = merged_df[columns_to_keep]

# Lưu DataFrame đã hợp nhất vào một tệp CSV mới
merged_df.to_csv('merged_airports_data.csv', index=False)
print("Dữ liệu đã được lưu vào merged_airports_data.csv.")

merged_df.head()

merged_df.columns

"""Ở các cột năm, định dạng số về số nguyên, đưa giá trị 'Unknown' và null về 0"""

# Chỉ định các cột để kiểm tra chuyển đổi sang kiểu số
numeric_columns = ['2012', '2013', '2014', '2015', '2016', '2017',
                   '2018', '2019', '2020', '2021', '2022', '2023']

# Loại bỏ các cột không cần thiết
columns_to_drop = ['No.', 'Province', 'City served', 'IATA', 'ICAO']
merged_df.drop(columns=columns_to_drop, inplace=True)

# Chuyển đổi các giá trị chuỗi có dấu phẩy sang kiểu số nguyên và xử lý các giá trị không phải số
for col in numeric_columns:
    # Loại bỏ dấu phẩy, chuyển đổi sang kiểu số, và thiết lập phân tích không hợp lệ thành NaN
    merged_df[col] = pd.to_numeric(merged_df[col].str.replace(',', ''), errors='coerce').fillna(0)

# Chuyển đổi các giá trị không phải số trong các cột đã chỉ định thành 0 (đã được xử lý ở trên)
# Tùy chọn, chuyển các cột sang kiểu số nguyên sau khi thay thế NaN bằng 0
merged_df[numeric_columns] = merged_df[numeric_columns].astype(int)

# Hiển thị vài hàng đầu tiên của DataFrame đã được chỉnh sửa
print(merged_df.head())

merged_df.head()

# Chuyển đổi DataFrame sang định dạng dài
melted_df = pd.melt(merged_df,
                    id_vars=['Airport name'],
                    value_vars=numeric_columns,
                    var_name='Year',
                    value_name='Passenger Count')

# Chuyển đổi cột 'Year' về kiểu số nguyên nếu cần
melted_df['Year'] = melted_df['Year'].astype(int)

# Chuyển đổi DataFrame đã được chuyển đổi để có năm làm hàng và tên sân bay làm cột
pivot_df = melted_df.pivot(index='Year', columns='Airport name', values='Passenger Count')

# Đặt lại chỉ số để làm phẳng DataFrame (tùy chọn)
pivot_df.reset_index(inplace=True)

# Hiển thị DataFrame đã được định hình lại
pivot_df.head()

import pandas as pd
from sklearn.linear_model import LinearRegression
import numpy as np


# Chuẩn bị một DataFrame để lưu trữ các dự đoán
predictions = []

# Vòng lặp qua từng sân bay để xây dựng mô hình và dự đoán
for airport in pivot_df.columns[1:]:
    # Chuẩn bị dữ liệu cho sân bay này
    X = pivot_df['Year'].values.reshape(-1, 1)  # Năm là đặc trưng
    y = pivot_df[airport].values  # Số hành khách là mục tiêu

    # Xóa các giá trị NaN nếu có
    if np.any(np.isnan(y)):
        valid_indices = ~np.isnan(y)
        X = X[valid_indices]
        y = y[valid_indices]

    # Huấn luyện mô hình nếu có đủ dữ liệu
    if len(X) >= 2:  # Đảm bảo có đủ dữ liệu để xây dựng mô hình
        model = LinearRegression()
        model.fit(X, y)

        # Dự đoán cho năm tiếp theo
        next_year = np.array([[pivot_df['Year'].max() + 1]])
        predicted_passengers = model.predict(next_year)[0]

        # Lưu kết quả dưới dạng số nguyên
        predictions.append({'Airport name': airport,
                            'Predicted Passengers': int(round(predicted_passengers))})
    else:
        predictions.append({'Airport name': airport, 'Predicted Passengers': None})  # Không đủ dữ liệu

# Chuyển đổi các dự đoán thành DataFrame
predictions_df = pd.DataFrame(predictions)

# Hiển thị các dự đoán
print(predictions_df)

# Giả sử predictions_df là DataFrame chứa các dự đoán
predictions_df = predictions_df.dropna()  # Xóa các giá trị NaN

predictions_df.reset_index(drop=True, inplace=True)

# Sắp xếp DataFrame theo 'Predicted Passengers' theo thứ tự giảm dần
sorted_predictions_df = predictions_df.sort_values(by='Predicted Passengers', ascending=False)

# Tùy chọn, đặt lại chỉ số sau khi sắp xếp
sorted_predictions_df.reset_index(drop=True, inplace=True)

# Hiển thị DataFrame đã sắp xếp
print(sorted_predictions_df)

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Giả sử melted_df chứa dữ liệu lịch sử với các cột 'Year', 'Airport name', 'Passenger Count'
# Giả sử predictions_df chứa dữ liệu dự đoán với các cột 'Airport name', 'Predicted Passengers'

# Thêm cột năm cho dự đoán
max_year = melted_df['Year'].max()  # Tìm năm lớn nhất trong dữ liệu lịch sử
predictions_df['Year'] = max_year + 1  # Gán năm tiếp theo cho dữ liệu dự đoán

# Kết hợp dữ liệu lịch sử và dữ liệu dự đoán
combined_df = pd.concat([melted_df, predictions_df.rename(columns={'Predicted Passengers': 'Passenger Count'})], ignore_index=True)

# Làm sạch dữ liệu
combined_df = combined_df.fillna(0)  # Thay thế NaN bằng 0

# Đặt kiểu cho biểu đồ
sns.set(style="whitegrid")

# Tạo biểu đồ
plt.figure(figsize=(14, 8))
for airport in combined_df['Airport name'].unique():  # Lặp qua từng sân bay
    airport_data = combined_df[combined_df['Airport name'] == airport]  # Lọc cho mỗi sân bay
    plt.plot(airport_data['Year'], airport_data['Passenger Count'], marker='o', label=airport)  # Vẽ đường biểu diễn

# Tùy chỉnh biểu đồ
plt.title('Passenger Trends for Airports (Including Predictions)', fontsize=16)  # Tiêu đề
plt.xlabel('Year', fontsize=14)  # Nhãn trục x
plt.ylabel('Passenger Count', fontsize=14)  # Nhãn trục y
plt.xticks(sorted(combined_df['Year'].unique()))  # Đặt các dấu tick trên trục x là các năm
plt.legend(title='Airport Name', bbox_to_anchor=(1.05, 1), loc='upper left')  # Chú thích
plt.grid(True)  # Lưới
plt.tight_layout()  # Định dạng lại để tránh chồng chéo

# Hiển thị biểu đồ
plt.show()